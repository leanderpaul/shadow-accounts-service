---
/**
 * Importing npm packages
 */
import { Image } from '@astrojs/image/components';

/**
 * Importing user defined packages
 */
import { verifyResetPasswordToken } from '@app/lib';

/**
 * Importing components
 */
import Layout from '@app/layouts/Layout.astro';
import Logo from '@assets/images/logo.png';
import { Icon } from 'astro-icon';

/**
 * Defining types
 */

/**
 * Declaring the constants
 */
const code = Astro.url.searchParams.get('code');
const valid = code ? await verifyResetPasswordToken(code) : false;
---

<Layout title='Reset Password - Shadow Accounts'>
  <div class='screen py-20'>
    <div class='flex-center flex-col'>
      <Image src={Logo} alt='Shadow Accounts Logo' width={100} />
      {
        valid ? (
          <>
            <h1 class='text-xl mt-5'>Reset Password</h1>
            <div class='card mt-5'>
              <div class='field'>
                <label for='password'>New Password</label>
                <input id='password' type='password' />
                <div class='field-error hidden'>No Errors</div>
              </div>
              <div class='field'>
                <label for='confirm-password'>Confirm New Password</label>
                <input id='confirm-password' type='password' />
                <div class='field-error hidden'>No Errors</div>
              </div>
              <button id='reset-password' class='btn bg-secondary text-white w-full my-2'>
                Reset Password
              </button>
            </div>
            <div id='success' class='card mt-5 hidden'>
              <div class='text-base'>Passwod reset successfully. Please signin again using your new password</div>
              <a class='btn bg-primary text-white w-full mt-4 text-center' href='/auth/signin'>
                Sign In
              </a>
            </div>
          </>
        ) : (
          <div class='card text-center error'>
            <Icon class='mx-auto' width='60px' name='mdi:alert-circle-outline' />
            <div class='text-2xl mt-5'>Invalid or expired password reset link</div>
          </div>
        )
      }
    </div>
  </div>
</Layout>

<style>
  .card {
    background-color: var(--background-paper);
    width: 400px;
    padding: 20px;
    border-radius: 3px;
  }

  .card.error {
    width: 600px;
    margin-top: 40px;
  }

  .field {
    font-size: 16px;
  }

  .field .field-error {
    font-size: 14px;
  }
</style>
<script>
  import { Notify } from 'notiflix';

  /** Getting the required element */
  const resetPasswordButton = document.getElementById('reset-password') as HTMLButtonElement;

  /** Setting up event listeners */
  resetPasswordButton?.addEventListener('click', handleResetPassword);

  async function handleResetPassword() {
    const newPasswordElement = document.getElementById('password') as HTMLInputElement;
    const confirmPasswordElement = document.getElementById('confirm-password') as HTMLInputElement;
    let hasError = false;

    const newPasswordErrorElement = newPasswordElement.parentElement?.querySelector('.field-error')!;
    if (newPasswordElement.value.length < 8 || newPasswordElement.value.length > 32) {
      newPasswordErrorElement.innerHTML = 'Should have atleast 8 characters and less than 32 characters';
      newPasswordErrorElement.classList.remove('hidden');
      hasError = true;
    } else if (!/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/.test(newPasswordElement.value)) {
      newPasswordErrorElement.innerHTML = 'Should have atleast 1 lowercase, 1 uppercase, 1 number and 1 special character';
      newPasswordErrorElement.classList.remove('hidden');
      hasError = true;
    } else newPasswordErrorElement.classList.add('hidden');

    const confirmPasswordErrorElement = confirmPasswordElement.parentElement?.querySelector('.field-error')!;
    if (confirmPasswordElement.value != newPasswordElement.value) {
      confirmPasswordErrorElement.innerHTML = 'Passwords do not match';
      confirmPasswordErrorElement.classList.remove('hidden');
      hasError = true;
    } else confirmPasswordErrorElement.classList.add('hidden');

    if (hasError) return;

    const search = new URLSearchParams(window.location.search);
    const query = `mutation { resetPassword(code: "${search.get('code')}", newPassword: "${confirmPasswordElement.value}") }`;
    resetPasswordButton.innerText = 'Updating...';
    resetPasswordButton.disabled = true;
    const response = await window.graphql(query);
    resetPasswordButton.innerText = 'Update';
    resetPasswordButton.disabled = false;
    if (response.success) {
      resetPasswordButton.parentElement?.remove();
      document.getElementById('success')?.classList.remove('hidden');
      return;
    }

    Notify.failure(response.error.message, { position: 'center-top' });
  }
</script>
